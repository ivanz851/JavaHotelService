version: '3.8'

services:
  

  postgres-booking:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_DB: ${BOOKING_DB}
      POSTGRES_USER: ${BOOKING_USER}
      POSTGRES_PASSWORD: ${BOOKING_PASS}
    ports:
      - "5432:5432"
    volumes:
      - postgres-booking-data:/var/lib/postgresql/data

  postgres-hotel:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_DB: ${HOTEL_DB}
      POSTGRES_USER: ${HOTEL_USER}
      POSTGRES_PASSWORD: ${HOTEL_PASS}
    ports:
      - "5431:5432"
    volumes:
      - postgres-hotel-data:/var/lib/postgresql/data

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc zookeeper 2181 | grep imok"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s

  broker:
    image: confluentinc/cp-kafka:7.5.0
    container_name: broker
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8085:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "broker:29092"
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8086:8080"
    depends_on:
      - broker
    environment:
      KAFKA_CLUSTERS_NAME: local
      KAFKA_CLUSTERS_BOOTSTRAPSERVERS: broker:29092
      DYNAMIC_CONFIG_ENABLED: "true"

  hotel-db-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter
    container_name: hotels_exporter
    restart: always
    environment:
      DATA_SOURCE_NAME: ${HOTEL_DB_URL}
    ports:
      - "9187:9187"
    depends_on:
      - postgres-hotel

  booking-db-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter
    container_name: booking_exporter
    restart: always
    environment:
      DATA_SOURCE_NAME: ${BOOKING_DB_URL}
    ports:
      - "9188:9188"
    depends_on:
      - postgres-booking
    command:
      - "--web.listen-address=:9188"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    depends_on:
      - hotel-db-exporter
      - booking-db-exporter

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    depends_on:
      - prometheus

volumes:
  postgres-booking-data:
  postgres-hotel-data:
  grafana-storage:
